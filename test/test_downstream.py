import unittest
import asyncio

from aioreactive.core import subscribe

from hausnet.devices import NodeDevice, BasicSwitch, OnOffState
from hausnet.flow import FixedFromBufferAsyncStream, topic_name, TOPIC_DIRECTION_DOWNSTREAM, AsyncToSyncBufferedStream
from hausnet.operators.operators import Operators as Op


class DownstreamTests(unittest.TestCase):
    """ Test sending command and configuration data downstream
    """
    def test_set_device_values(self):
        """Test that device state changes end up in the downstream buffer"""
        switch_1 = BasicSwitch('switch_a')
        switch_2 = BasicSwitch('switch_b')
        switch_3 = BasicSwitch('switch_c')
        NodeDevice('node/ABC123', {'switch_1': switch_1, 'switch_2': switch_2})
        NodeDevice('node/456DEF', {'switch_3': switch_3})
        loop = asyncio.get_event_loop()
        sink = AsyncToSyncBufferedStream(loop)

        async def main():
            source_switch_1 = FixedFromBufferAsyncStream(loop, 2)
            source_switch_2 = FixedFromBufferAsyncStream(loop, 1)
            source_switch_3 = FixedFromBufferAsyncStream(loop, 1)
            topic_1 = topic_name(switch_1.get_node().topic_prefix(), TOPIC_DIRECTION_DOWNSTREAM)
            stream_switch_1 = (
                source_switch_1
                | Op.map(lambda msg: {switch_1.device_id: msg})
                | Op.map(lambda msg: switch_1.get_node().coder.encode(msg))
                | Op.map(lambda msg: {'topic': topic_1, 'message': msg})
            )
            topic_2 = topic_name(switch_2.get_node().topic_prefix(), TOPIC_DIRECTION_DOWNSTREAM)
            stream_switch_2 = (
                source_switch_2
                | Op.map(lambda msg: {switch_2.device_id: msg})
                | Op.map(lambda msg: switch_2.get_node().coder.encode(msg))
                | Op.map(lambda msg: {'topic': topic_2, 'message': msg})
            )
            topic_3 = topic_name(switch_3.get_node().topic_prefix(), TOPIC_DIRECTION_DOWNSTREAM)
            stream_switch_3 = (
                source_switch_3
                | Op.map(lambda msg: {switch_3.device_id: msg})
                | Op.map(lambda msg: switch_3.get_node().coder.encode(msg))
                | Op.map(lambda msg: {'topic': topic_3, 'message': msg})
            )
            await source_switch_1.queue.put({'state': OnOffState.ON})
            await source_switch_2.queue.put({'state': OnOffState.ON})
            await source_switch_3.queue.put({'state': OnOffState.ON})
            await source_switch_1.queue.put({'state': OnOffState.OFF})
            await subscribe(stream_switch_1, sink)
            await subscribe(stream_switch_2, sink)
            await subscribe(stream_switch_3, sink)
            await source_switch_1.stream()
            await source_switch_2.stream()
            await source_switch_3.stream()

        loop.run_until_complete(main())
        messages = []
        while not sink.queue.empty():
            messages.append(sink.queue.get())
        loop.close()
        self.assertEqual(4, len(messages), "Expected four messages to be generated by devices")
        self.assertIn(
            {'topic': 'hausnet/node/ABC123/downstream', 'message': '{"switch_a": {"state": "ON"}}'},
            messages,
            "switch_1 should have 'ON' message"
        )
        self.assertIn(
            {'topic': 'hausnet/node/ABC123/downstream', 'message': '{"switch_a": {"state": "OFF"}}'},
            messages,
            "switch_1 should have 'OFF' message"
        )
        self.assertIn(
            {'topic': 'hausnet/node/ABC123/downstream', 'message': '{"switch_b": {"state": "ON"}}'},
            messages,
            "switch_2 should have 'ON' message"
        )
        self.assertIn(
            {'topic': 'hausnet/node/456DEF/downstream', 'message': '{"switch_c": {"state": "ON"}}'},
            messages,
            "switch_3 should have 'ON' message"
        )
