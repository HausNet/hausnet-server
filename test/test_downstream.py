import unittest
from typing import Dict, Union
import asyncio

from aioreactive.core import subscribe, AsyncAnonymousObserver

from hausnet.device import NodeDevice, BasicSwitch, OnOffState, VirtualDevice, ControllingMixin
from hausnet.flow import TestableBufferedAsyncSource
from hausnet.operators.operators import Operators as Op


class DownstreamTests(unittest.TestCase):
    """ Test sending command and configuration data downstream
    """
    def test_set_device_values(self):
        """ Test that setting device values generates a stream of data.
        """
        node_1 = NodeDevice('device_id/ABC123', [BasicSwitch('switch_1'), BasicSwitch('switch_2')])
        node_2 = NodeDevice('device_id/456DEF', [BasicSwitch()])
        messages = []

        async def stream_observer(message: Dict[str, Union[str, int, float, 'VirtualDevice']]):
            print(message)
            messages.append(message)

        async def main():
            ControllingMixin.control_buffer = TestableBufferedAsyncSource(4)
            node_1.devices['switch_1'].new_state(OnOffState(OnOffState.ON))
            node_1.devices['switch_2'].new_state(OnOffState(OnOffState.OFF))
            node_2.devices['basic_switch'].new_state(OnOffState(OnOffState.ON))
            node_1.devices['switch_1'].new_state(OnOffState(OnOffState.OFF))
            await subscribe(ControllingMixin.control_buffer, AsyncAnonymousObserver(stream_observer))

        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
        loop.close()
        self.assertEqual(4, len(messages), "Expected four messages to be generated by devices")
        self.assertEqual(
            {'state': 'ON', 'device': node_1.devices['switch_1']},
            messages[0],
            "node_1/switch_1 value in message should be 'ON'")
        self.assertEqual(
            {'state': 'OFF', 'device': node_1.devices['switch_2']},
            messages[1],
            "node_1/switch_2 value in message should be 'OFF'")
        self.assertEqual(
            {'state': 'ON', 'device': node_2.devices['basic_switch']},
            messages[2],
            "node_2/basic_switch value in message should be 'ON'")
        self.assertEqual(
            {'state': 'OFF', 'device': node_1.devices['switch_1']},
            messages[3],
            "node_1/switch_1 value in message should be 'OFF'")

    def test_message_prep(self):
        """ Test that setting device values generates a stream of messages ready for delivery.
        """
        node_1 = NodeDevice('device_id/ABC123', [BasicSwitch('switch_1'), BasicSwitch('switch_2')])
        node_2 = NodeDevice('device_id/456DEF', [BasicSwitch()])
        messages = []

        async def stream_observer(message: Dict[str, Union[str, int, float, 'VirtualDevice']]):
            print(message)
            messages.append(message)

        async def main():
            ControllingMixin.control_buffer = TestableBufferedAsyncSource(4)
            node_1.devices['switch_1'].new_state(OnOffState(OnOffState.ON))
            node_1.devices['switch_2'].new_state(OnOffState(OnOffState.OFF))
            node_2.devices['basic_switch'].new_state(OnOffState(OnOffState.ON))
            node_1.devices['switch_1'].new_state(OnOffState(OnOffState.OFF))
            ##
            # Stream operations, somewhat following the upstream steps:
            #   1) Package the device state & device device_id as a dictionary, together with the node
            #   2) Construct the topic device_id from the node, and encode the payload
            stream = (
                ControllingMixin.control_buffer
                | Op.map(lambda dev_msg: {
                    'node': dev_msg['device'].node,
                    'dev_state': {dev_msg['device'].name: {'state': dev_msg['state']}}
                    })
                | Op.map(lambda node_msg: {
                    'topic':   node_msg['node'].topic_prefix() + '/downstream',
                    'message': node_msg['node'].coder.encode(node_msg['dev_state'])
                    })
                )
            await subscribe(stream, AsyncAnonymousObserver(stream_observer))

        loop = asyncio.get_event_loop()
        loop.run_until_complete(main())
        loop.close()
        self.assertEqual(4, len(messages), "Expected four messages to be delivered")
        self.assertEqual(
            {'topic': 'hausnet/device_id/ABC123/downstream', 'message': '{"switch_1": {"state": "ON"}}'},
            messages[0],
            "node_1/switch_1 value in message should be 'ON'")
        self.assertEqual(
            {'topic': 'hausnet/device_id/ABC123/downstream', 'message': '{"switch_2": {"state": "OFF"}}'},
            messages[1],
            "node_1/switch_2 value in message should be 'OFF'")
        self.assertEqual(
            {'topic': 'hausnet/device_id/456DEF/downstream', 'message': '{"basic_switch": {"state": "ON"}}'},
            messages[2],
            "node_2/basic_switch value in message should be 'ON'")
        self.assertEqual(
            {'topic': 'hausnet/device_id/ABC123/downstream', 'message': '{"switch_1": {"state": "OFF"}}'},
            messages[3],
            "node_1/switch_1 value in message should be 'OFF'")
